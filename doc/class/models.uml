@startuml
package Orm {

package Serializable {

interface SerializerTableFile {
    + toFile(Path) : boolean <<default>>
    + fromFile(Path) : String <<default>>
    + toFile(String path) : boolean <<default>>
    + fromFile(String path) : String <<default>>
    + fromFileEach(Function<String, Boolean>) : boolean <<default>>
}

interface SerializerTableCsv{
    + fromCsv(Path) : boolean <<default>>
    + toCsv(Path) : boolean <<default>>
    + fromCsv(String path) : boolean <<default>>
    + toCsv(String path) : boolean <<default>>
}

interface SerializerTableSql{
    + fromSql(Path) : boolean <<default>>
    + toSql(Path) : boolean <<default>>
    + fromSql(String path) : boolean <<default>>
    + toSql(String path) : boolean <<default>>
}

}

class Connector <<Abstract>> {
    - String host
    - String user
    - String password

    + Connector()
    + Connector(String host)
    + Connector(String host, String user, String password, String port)

    + connect() : Connector
    + execute(String query) : Connector
    + close(): void
    + forEachTable(Function<Table, Boolean>) : void
}

class MySql {
    + Mysql()
    + Mysql(String host)
    + Mysql(String host, String user, String password, String port)
}

class Query {
    - Table table

    + Query(Table)

    + select(List<String> columns) : Query
    + insert(Map<String, String>) : Query
    + update(Map<String,String>) : Query
    + delete(Map<String, String>) : Query
    + execute(Connector) : ResultSet
}

class Table {
    - String nameTable
    + query() : Query
}

class Fixture {
    - Path path
    + boolean populate(Connector)
}

Connector <|-- MySql
Table "*" --* "1" Connector
Table --> Query : Prepare >
Connector "1" <-- "1" Fixture : Populate <

SerializerTableSql  <|.. Table
SerializerTableCsv  <|.. Table
SerializerTableFile  <|-- SerializerTableCsv
SerializerTableFile  <|-- SerializerTableSql
}

package Models {
    class Partenaires {

    }

    Table <|-- Partenaires
}

@enduml
