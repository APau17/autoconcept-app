@startuml
package Orm {

package Serializable {
interface SerializerTableFile {
    + getSerilizePathFile() : Path
    + toFile() : void <<default>>
    + fromFile() : String <<default>>
    + fromFileEach(Function<String, void>) : void <<default>>
}

interface SerializerTableCsv{
    + fromCsv() : void <<default>>
    + toCsv() : void <<default>>
}

interface SerializerTableXml{
    + fromXml() : void <<default>>
    + toXml() : void <<default>>
}

interface SerializerTableSql{
    + fromSql() : void <<default>>
    + toSql() : void <<default>>
}

}

class Connector {
    - String host
    - String user
    - String password

    + Connector()
    + Connector(String host)
    + Connector(String host, String user, String password, String port)

    + connect() : Connector
    + execute(String query) : Connector
    + close(): void
    + forEachTable(Function<Table, boolean>)
}

class MySql {
    + Mysql()
    + Mysql(String host)
    + Mysql(String host, String user, String password, String port)
}

class Fixture {
    
}

class Query {
    - Path path

    + Query()

    + select(List<String> columns) : Query
    + insert(Map<String, String>) : Query
    + update(Map<String,String>) : Query
    + delete(Map<String, String>) : Query
}

class Serialize {
    Serialize(Table)
}

class Table {
    - String nameTable
    - serializeFilePath Path

    + query() : Query
}

Connector <|-- MySql
Table "*" --* "1" Connector
Table -- Query
Table -- Serialize

SerializerTableSql <|.. Serialize
SerializerTableCsv <|.. Serialize
SerializerTableXml <|.. Serialize
SerializerTableFile  <|-- SerializerTableCsv
SerializerTableFile  <|-- SerializerTableXml
SerializerTableFile  <|-- SerializerTableSql
}

package Contact {
class Contact {

}
}

@enduml
