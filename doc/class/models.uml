@startuml

package Orm {

package Serializable {

interface DeserializeTableFile {
    + toFile(Path) : boolean <<default>>
    + toFile(String path) : boolean <<default>>
}

interface DeserializeTableCsv{
    + toCsv(Path) : boolean <<default>>
    + toCsv(String path) : boolean <<default>>
}

interface DeserializeTableSql{
    + toSql(Path) : boolean <<default>>
    + toSql(String path) : boolean <<default>>
}

}

class Connector <<Abstract>> {
    - String host
    - String user
    - String password

    + Connector()
    + Connector(String host)
    + Connector(String host, String user, String password, String port)

    + connect() : Connector
    + execute(String query) : Connector
    + close(): void
    + forEachTable(Function<Table, Boolean>) : void
}

class MySql {
    + Mysql()
    + Mysql(String host)
    + Mysql(String host, String user, String password, String port)
}

package Query {
class Query {
    - Table table

    + Query()
    + Query(Table)

    + select(List<String> columns) : QuerySelect
    + select(String columns) : QuerySelect
    + insert(Map<String, String>) : QueryInsert
    + update(Map<String,String>) : QueryUpdate
    + delete(Map<String, String>) : QueryDelete
}


interface QueryBelongs {
     + getTable() : Table
     + setBelongs(Row) : void
     + getBelongs() : Row
     + belongsPrepare() : PrepareStatement <<default>>
     + belongs(Row) <<default>>
}

interface QueryWhere {
     + getTable() : Table
     + getWhere(): String
     + wherePrepare(PrepareStatement) : PrepareStatement <<default>>
}

class QuerySelect {
    - Table table
    - Integer count
    - List String<String columns>
    - Interger cout
    - String group_by
    - boolean distinct
    - List<String> field

    + QuerySelect()

    + prepare(Connector) : PrepareStatement

    + limit(Integer count) : QuerySelect
    + groupBy(String str) : QuerySelect
    + distinct() : QuerySelect
    + where(String str, String... field) : QuerySelect
    + execute(Connector) : ResultSet
}

}

class Table {
    - String nameTable
    - String primaryKeyName
    - Map<String, JDBCType> columns
    + query() : Query
}

class Row {
    - String primaryKey
}

class Fixture {
    - Path path
    + boolean populate(Connector)
}

Connector <|-- MySql
Table "*" --* "1" Connector
Table --> Query : Prepare >
Connector "1" <-- "1" Fixture : Populate <

QuerySelect <-- Query : Factory <
QuerySelect ..|> QueryWhere
QuerySelect ..|> QueryBelongs

DeserializeTableSql  <|.. QuerySelect
DeserializeTableCsv  <|.. QuerySelect
DeserializeTableFile  <|-- DeserializeTableCsv
DeserializeTableFile  <|-- DeserializeTableSql
}

package Models {
    class Partenaires {

    }

    class Partenaire {
        
    }

    Table <|-- Partenaires
    Row <|-- Partenaire
    Partenaires "1" --> "*" Partenaire : For each row >
}

package exceptions {
    class ExceptionOrm {

    }

    ExceptionOrm --|> java.lang.Exception
}

@enduml
